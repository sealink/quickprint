buildscript {
	ext {
		kotlinVersion = '1.4.32'
		springBootVersion = '2.4.4'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
	}
}

plugins {
    id "com.jfrog.bintray" version "1.8.5"
    id "maven-publish"
    id 'net.nemerosa.versioning' version '2.14.0'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.11.0'
    id 'com.bmuschko.docker-remote-api' version '3.6.1'
    id "com.patdouble.awsecr" version "0.4.0"
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'war'
apply plugin: 'kotlin-spring'
apply plugin: 'kotlin'

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

test {
    useJUnitPlatform()

    testLogging {
        events "failed"
        exceptionFormat "full"
    }
}

group = 'au.com.sealink'
sourceCompatibility = 1.8
compileKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}
compileTestKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}

versioning {
    branchEnv = ['TRAVIS_BRANCH', 'TRAVIS_TAG', 'TRAVIS_PULL_REQUEST_BRANCH', 'GIT_BRANCH']
}

if(versioning.info.tag == null) {
    version = versioning.info.display
}
else {
    version = versioning.info.tag
}

repositories {
    google()
    jcenter()
    mavenCentral()
    maven {
        name = "GitHubPackages"
        url = "https://maven.pkg.github.com/sealink/ticket_printer"
        credentials {
            username = System.getenv("GITHUB_USERNAME")
            password = System.getenv("GITHUB_TOKEN")
        }
    }
}

bootJar {
    launchScript()
}

bootWar {
    excludeDevtools = false
}

task createProperties(dependsOn: processResources) {
    doLast {
        new File("$buildDir/resources/main/version.properties").withWriter { w ->
            Properties p = new Properties()
            p['version'] = project.version.toString()
            p.store w, null
        }
    }
}

classes {
    dependsOn createProperties
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar, bootWar
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile "org.springframework.boot:spring-boot-starter-security"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile group: 'org.springframework.data', name: 'spring-data-commons', version: '2.5.6'
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.3-native-mt"
		compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
		compile "org.jetbrains.kotlin:kotlin-reflect"
    compile 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'au.com.sealink:printing:1.7.1'


    compile group: 'com.rapid7', name: 'r7insight_java', version: '3.0.7'
    testCompile('org.springframework.boot:spring-boot-starter-test') {
			exclude module: 'junit'
            exclude module: 'junit-vintage-engine'
		}
    testCompile("com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0")
		testImplementation('org.junit.jupiter:junit-jupiter-api:5.7.1')
		testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine')
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
}

def pomConfig = {
    licenses {
        license {
            name "MIT License"
            url "http://www.opensource.org/licenses/mit-license.php"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "jmortlock"
            name "John Mortlock"
            email "john.mortlock@sealink.com.au"
        }
    }

    scm {
        url "https://github.com/sealink/quickprint.git"
    }
}

publishing {
    publications {
        mavenPublication(MavenPublication) {
            from components.web
            artifact sourcesJar {
                classifier "sources"
            }
            groupId 'au.com.sealink'
            artifactId 'quickprint'
            version project.version
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'SeaLink Printing Service')
                root.appendNode('name', 'SeaLink Printing Service')
                root.appendNode('url', 'https://github.com/sealink/quickprint')
                root.children().last() + pomConfig
            }
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/sealink/quickprint"
            credentials {
                username = System.getenv("GITHUB_USERNAME")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

def ecrBase = '120983864185.dkr.ecr.ap-southeast-2.amazonaws.com'

docker {
    registryCredentials {
        url = "https://$ecrBase"
    }
}

import com.bmuschko.gradle.docker.tasks.image.Dockerfile

task createDockerfile(type: Dockerfile) {
    destFile = project.file('build/docker/Dockerfile')
    from 'openjdk:8-jdk'
    label(
    	'maintainer': 'john.mortlock@sealink.com.au'
    )
    environmentVariable 'PRINTER_NAME', 'cups-pdf'
    volume '/root/PDF'
    runCommand 'apt-get update && apt-get -y install cups-pdf cups-bsd && apt-get clean'
    copyFile 'cups-pdf.conf', '/etc/cups/cups-pdf.conf'
    copyFile war.archiveName, '/app/quickprint.war'
    copyFile 'entrypoint.sh', '/app/entrypoint.sh'
    exposePort 8080
    entryPoint '/app/entrypoint.sh'
}

task syncWebAppArchive(type: Sync) {
    dependsOn assemble
    from war.archivePath
    into createDockerfile.destFile.parentFile

    from project.file('docker/entrypoint.sh')
    into createDockerfile.destFile.parentFile

    from project.file('docker/cups-pdf.conf')
    into createDockerfile.destFile.parentFile
}

createDockerfile.dependsOn syncWebAppArchive

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

def ecrImageTag = "${ecrBase}/quickprint:$war.version"
task buildImage(type: DockerBuildImage) {
    dependsOn createDockerfile
    inputDir = createDockerfile.destFile.parentFile
    tag = ecrImageTag
}

import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

task pushImage(type: DockerPushImage) {
    dependsOn buildImage
    conventionMapping.imageName = { buildImage.tag }
}

task publishImage() {
    dependsOn pushImage
}

task createDockerrun() {
    file('Dockerrun.aws.json').text = """{
  "AWSEBDockerrunVersion": "1",
  "Image": {
    "Name": "${ecrImageTag}",
    "Update": "true"
  },
  "Ports": [
    {
      "ContainerPort": "8080"
    }
  ],
  "Volumes": [
    {
      "HostDirectory": "/mnt/nfs/PDF",
      "ContainerDirectory": "/root/PDF"
    }
  ],
  "Logging": "/var/log/nginx"
}
"""
}

task copyEBDirForArchiving(type: Copy) {
    dependsOn createDockerrun
    from(".") {
        include ".ebextensions/**"
    }

    from "Dockerrun.aws.json"
    into "${buildDir}/toArchive"
}

task buildEBArchive(type: Zip) {
    dependsOn copyEBDirForArchiving
    from "${buildDir}/toArchive"
    archiveName "eb.zip"
}
